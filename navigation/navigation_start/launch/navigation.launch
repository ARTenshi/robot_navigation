<?xml version="1.0" encoding="utf-8"?>
<launch>
  <arg name="simulator" default="false"/>
  <param if="$(arg simulator)" name="/use_sim_time" value="true"/>

  <!--topic remapping-->
  <remap from="/static_obstacle_map_ref" to="/static_map"/>
  <remap from="/static_map" to="/get_distance_map"/>
  
  <remap from="/laser_2d_pose" to= "/global_pose"/>
  <remap from="/cmd_vel" to="/hsrb/command_velocity"/>
  <remap from="/initialpose" to="/laser_2d_correct_pose"/>  
  
  <!--GlobalPoseIntegrator-->
  <node name="killer_node" pkg="killer_node" type="killer_node.py" output="screen"/>
  <node name="fake_global_pose" pkg="killer_node" type="fake_global_pose.py" output="screen"/>

  <!--RVIS-->
  <node name="pumasviz" pkg="rviz" type="rviz" args="-d $(find navigation_start)/rviz/config.rviz"/>
  
  <!--map file path-->
  <arg name="map_name" default="carrobo"/>
  <arg name="prohibition_map_file"  default="$(find navigation_start)/maps/prohibition_maps/$(arg map_name)/map.yaml"/>
  <arg name="static_map_file"  default="$(find navigation_start)/maps/maps/$(arg map_name)/map.yaml"/>

  <!--for adding environment obstacle to map-->
  <arg name="env_file_name" default="env_furniture_rc24.yaml"/>
  <arg name="add_static_obstacles" default="false"/>

  <!--input topic-->
  <arg name="cmd_vel_name" default="/hsrb/command_velocity"/>
  <arg name="laser_scan_topic" default="/hsrb/base_scan"/>
  <arg name="point_cloud_topic" default="/hma_pcl_reconst/depth_registered/points"/>
  <arg name="point_cloud_topic2" default="/hsrb/head_rgbd_sensor/depth_registered/rectified_points"/>
  <arg name="bumper_f_topic" default="/hsrb/base_f_bumper_sensor"/>
    
  <!--sensor fusion-->
  <arg name="use_lidar" default="True"/>
  <arg name="use_sonars" default="False"/>
  <arg name="use_point_cloud" default="True"/>
  <arg name="use_point_cloud2" value="False"/>
  <arg name="use_bumper" default="False"/>

  <!--potential fields-->
  <arg name="use_pot_fields" default="True"/>
  
  <!--sensor downsampling, detection threshold-->
  <arg name="cloud_downsampling" default="9"/>
  <arg name="lidar_downsampling" default="2"/>
  <arg name="cloud_points_threshold" default="100"/>
  <arg name="lidar_points_threshold" default="20"/>
  
  <!--障害物を検出する範囲を指定するパラメータ-->
  <!--depth/-->
  <arg name="min_x" default="0.17"/>
  <arg name="max_x" default="0.50"/>
  <!--width, min_y is rightside-->
  <arg name="min_y" default="-0.25"/>
  <arg name="max_y" default="0.25"/>
  <!--height-->
  <arg if="$(arg simulator)" name="min_z" default="0.02"/>
  <!-- simulatorがfalseのときにmin_zを0.05に設定 -->
  <arg unless="$(arg simulator)" name="min_z" default="0.05"/>
  <!--arg name="min_z" default="0.05"/-->
  <arg name="max_z" default="1.2"/>

  <!--Hardware-->
  <group ns="hardware">
    <node name="head" pkg="head" type="head_node" output="screen"/>
    <node name="led" pkg="head" type="led_node" output="screen"/>

    <!--navigationするときのアームの初期姿勢を変更する-->
    <node name="arm" pkg="arm" type="arm_node" output="screen">
      <!--arm_lift, meter-->
      <rosparam param="torso_goal_pose">0.0</rosparam> 
      <!--[arm_flex, arm_roll, wrist_flex, wrist_roll], rad-->
      <rosparam param="arm_goal_pose">[0.0, -1.57, -1.57, 0.0]</rosparam>
    </node>

  </group>
  
  <!--PathPlanner-->
  <node name="path_planner" pkg="path_planner" type="path_planner_node" output="screen" respawn="true">
    <param name="diagonal_paths" value="True"/>
  </node>
  
  <!--SimpleMove-->
  <node name="simple_move"  pkg="simple_move"  type="simple_move_node"  output="screen">

    <param name="max_linear_speed" value="1.00"/> 
    <param name="max_angular_speed" value="1.25"/>
    <param name="control_alpha" value="0.6548"/>
    <param name="control_beta" value="0.2"/>

    <!--rc24-->
    <!--param name="control_alpha" value="0.3"/>
    <param name="control_beta" value="0.12"/-->

    <!--TODO angle_tolerance-->
    <!--param name="angle_tolerance" value="0.03"/-->

    <param name="use_pot_fields" value="$(arg use_pot_fields)"/>
    <param name="cmd_vel_name" value="$(arg cmd_vel_name)"/>
  </node>
  
  <!--ObstacleDetecotor-->
  <node name="obs_detector"  pkg="obstacle_detector"  type="obs_detect_node" output="screen" respawn="true">
    <param name="laser_scan_topic" value="$(arg laser_scan_topic)"/>
    <param name="point_cloud_topic" value="$(arg point_cloud_topic)"/>
    <param name="point_cloud_topic2" value="$(arg point_cloud_topic2)"/>
    <param name="bumper_f_topic" value="$(arg bumper_f_topic)"/>
    
    <param name="use_lidar" value="$(arg use_lidar)"/>
    <param name="use_sonars" value="$(arg use_sonars)"/>
    <param name="use_point_cloud" value="$(arg use_point_cloud)"/>
    <param name="use_point_cloud2" value="$(arg point_cloud_topic2)"/>
    <param name="use_bumper" value="$(arg use_bumper)"/>
    <param name="use_pot_fields" value="$(arg use_pot_fields)"/>
    
    <param name="cloud_downsampling" value="$(arg cloud_downsampling)"/>
    <param name="cloud_points_threshold" value="$(arg cloud_points_threshold)"/>
    <param name="lidar_points_threshold" value="$(arg lidar_points_threshold)"/>
    
    <param name="obs_detector_debug" value="False"/>
    
    <!--PotentialFields-->
    <param name="pot_fields_k_rej" value="0.25"/>
    <param name="pot_fields_d0" value="0.35"/>
    
    <param name="max_x" value="$(arg max_x)"/>
    <param name="min_x" value="$(arg min_x)"/>
    <param name="max_y" value="$(arg max_y)"/>
    <param name="min_y" value="$(arg min_y)"/>
    <param name="max_z" value="$(arg max_z)"/>
    <param name="min_z" value="$(arg min_z)"/>
  </node>

  
  <!--MapAugmenter-->
  <!--TODO decay_factor >> delete dynamic obstacle to move 10s-->
  <node name="map_augmenter"  pkg="map_augmenter"  type="map_augmenter_node"  output="screen">
    <param name="laser_scan_topic" value="$(arg laser_scan_topic)"/>
    <param name="point_cloud_topic" value="$(arg point_cloud_topic)"/>
    <!--param name="point_cloud_topic2" value="$(arg point_cloud_topic2)"/-->
    
    <param name="use_lidar" value="$(arg use_lidar)"/>
    <param name="use_sonars" value="$(arg use_sonars)"/>
    <param name="use_point_cloud" value="$(arg use_point_cloud)"/>
    <param name="use_point_cloud2" value="$(arg use_point_cloud2)"/>
    
    <param name="cloud_downsampling" value="$(arg cloud_downsampling)"/>

    <!--inflation_radius (black zone's inflation) -->
    <!--param name="inflation_radius" value="0.22"/>
    <param name="cost_radius" value="0.1"/-->
    <!--param name="inflation_radius" value="0.17"/-->

    <!--rc24 param-->
    <!--param name="inflation_radius" value="0.22"/>
    <param name="cost_radius" value="0.35"/-->

    <param name="inflation_radius" value="0.15"/>
    <param name="cost_radius" value="0.35"/>

    <!--param name="decay_factor" value="10"/-->
    
    <param name="max_x" value="$(arg max_x)"/>
    <param name="min_x" value="$(arg min_x)"/>
    <param name="max_y" value="$(arg max_y)"/>
    <param name="min_y" value="$(arg min_y)"/>
    <param name="max_z" value="$(arg max_z)"/>
    <param name="min_z" value="$(arg min_z)"/>
  </node>
  
  <!--MapServer-->
  <!-- COMMENT THE FOLLOWING LINE IF THE MAP IS STARTED IN THE ROBOT-->
  <node name="map_server" pkg="map_server" type="map_server" output="screen" args="$(arg static_map_file)"/>
  <node name="prohibition_map_server" pkg="map_server" type="map_server" output="screen" args="$(arg prohibition_map_file)">
    <remap from="/static_map" to="/fixed_prohibition_map"/>
    <remap from="/map" to="/fixed_prohibition_layer_map"/>
  </node>
  

  <!--MapEnhancer-->
  <node name="map_enhancer" pkg="augment_gridmap_online" type="augment_gridmap_online_node" output="screen">

    <remap from="point_obstacle" to="/clicked_point"/>
    <param name="obstacle_radius" value="0.05" type="double"/>

    <param name="input_map" value="/fixed_prohibition_layer_map"/>
    <remap from="/grid_map/get_augmented_map" to="/prohibition_map"/>
    <remap from="/grid_map/augmented_map" to="/prohibition_layer_map"/>

    <param name="env_file_name" value="$(arg env_file_name)"/>
    <param name="add_static_obstacles" value="$(arg add_static_obstacles)"/>
  </node>
  
  <!--MVN_PLN-->
  <node name="mvn_pln"  pkg="mvn_pln"  type="mvn_pln_node"  output="screen">
    <remap from="/nav_control/goal" to="/move_base_simple/goal"/>
    <param name="patience" value="True"/>
    <param name="proximity_criterion" value="0.2"/>

    <!--simulator-->
    <param if="$(arg simulator)" name="move_error_threshold" value="0.001"/>
    <!--real robot-->
    <param unless="$(arg simulator)" name="move_error_threshold" value="0.03"/>
  </node>

  <!--AMCL-->
  <node name="amcl" pkg="amcl" type="amcl" output="screen" args="scan:=$(arg laser_scan_topic) static_map:=/get_distance_map">

    <!--odomノイズパラメータ，正確でない場合に値を増やす-->
    <!--param name="odom_alpha1" value="0.01"/-->
    <param name="odom_alpha1" value="0.1"/>
    <param name="odom_alpha2" value="0.1"/>
    <param name="odom_alpha3" value="0.1"/>
    <param name="odom_alpha4" value="0.1"/>
    <param name="odom_alpha5" value="0.1"/>

    <!--小さいほど回転する際に位置を更新する-->
    <!--param name="update_min_a" value="0.1"/-->
    <param name="update_min_a" value="0.05"/>
    <!--小さいほど移動の際に位置を更新する-->
    <param name="update_min_d" value="0.05"/>

    <param name="laser_min_range" value="0.3"/>
    <param name="odom_model_type" value="omni-corrected"/>
  </node>

  <!--To enable obstacle detector node-->
  <arg name="topic_name" default="/navigation/obs_detector/enable" />
  <node pkg="rostopic" type="rostopic" name="rostopic_pub_node" output="screen" args="pub $(arg topic_name) std_msgs/Bool 'data: true'" />

  <!--changing pot_fields dynamically, using for follow me-->
  <node name="pot_fields_updator_node"  pkg="navigation_tools"  type="pot_fields_updator.py" output="screen" respawn="true"/>
  
</launch>
